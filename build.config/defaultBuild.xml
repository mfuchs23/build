<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="default">

  <dirname property="default.dir" file="${ant.file.default}" />

  <property file="${default.dir}/common.properties" />
  <property file="${ivy.dir}/ivy.properties" />
  <property file="${basedir}/module.properties" />

  <taskdef name="castor" classname="org.castor.anttask.CastorCodeGenTask" />

  <path id="src.main.path">
    <pathelement location="${src.main.dir}" />
  </path>

  <path id="src.test.path">
    <pathelement location="${src.test.dir}" />
  </path>

  <available property="src.main.dir.exists" file="${src.main.dir}"/>
  <available property="src.main.resources.dir.exists" file="${src.dir}/main/resources"/>
  
  <presetdef name="default.main.javac">
    <javac destdir="${build.main.classes.dir}" debug="${javac.debug}" includeantruntime="false" encoding="UTF-8">
      <classpath refid="resolve.classpath" />
      <compilerarg value="${javac.args}" />
    </javac>
  </presetdef>

  <!-- ========================================== -->
  <!-- MACROS                                     -->
  <!-- ========================================== -->
  <macrodef name="iterate">
    <attribute name="target"/>
    <sequential>
      <subant target="@{target}" inheritAll="false">
	<property name="ivy.status" value="${ivy.status}"/>
	<property name="ivy.overwrite" value="${ivy.overwrite}"/>
	<property name="resolveMode" value="${resolveMode}"/>
	<fileset dir=".">
	  <exclude name="build.config/build.xml"/>
	  <exclude name="org.dbdoclet.test.*/build.xml"/>
	  <include name="*/build.xml"/>
	</fileset>
      </subant>
    </sequential>
  </macrodef>

  <macrodef name="incr-release-number">
    <sequential>
      <script language="javascript">
	var version = project.getProperty("module.version");
	var tokens = version.split(".");
	var release = parseInt(tokens[1]) + 1;
	version = tokens[0] + "." + release + ".0-SNAPSHOT";
	project.setProperty("module.version", version);
      </script>
      <propertyfile file="module.properties">
	<entry key="module.version" value="${module.version}"/>
	<entry key="java.debug" value="on" />
	<entry key="java.deprecation" value="on"/>
      </propertyfile>
    </sequential>
  </macrodef>

  <macrodef name="incr-patch-number">
    <sequential>
      <script language="javascript">
	var version = project.getProperty("module.version");
	var tokens = version.split(".");
	var patch = parseInt(tokens[2]) + 1;
	version = tokens[0] + "." + tokens[1] + "." + patch + "-SNAPSHOT";
	project.setProperty("module.version", version);
      </script>
      <propertyfile file="module.properties">
	<entry key="module.version" value="${module.version}"/>
	<entry key="java.debug" value="on" />
	<entry key="java.deprecation" value="on"/>
      </propertyfile>
    </sequential>
  </macrodef>

  <macrodef name = "git">
    <attribute name = "command" />
    <attribute name = "dir" default = "" />
    <element name = "args" optional = "true" />
    <sequential>
      <!-- <echo message = "git @{command}" /> -->
      <local name="git.resultcode"/>
      <exec executable = "git"
	    dir = "@{dir}"
	    failonerror="false"
	    resultproperty="git.resultcode">
        <arg value = "@{command}" />
        <args/>
      </exec>
      <!-- <echo>git resultcode="${git.resultcode}"</echo> -->
      <fail message="git @{command} exited with result code ${git.resultcode}">
	<condition>
	  <not>
	    <equals arg1="0" arg2="${git.resultcode}"/>
	  </not>
	</condition>
      </fail>
    </sequential>
  </macrodef>
  
  <macrodef name = "git-branch-release">
    <sequential>
      <git command = "checkout">
	  <args>
          <arg value = "-B" />
          <arg value = "release-${branch.version}" />
	</args>
      </git> 
    </sequential>
  </macrodef>

  <macrodef name = "git-commit-release">
    <sequential>
      <git command = "commit">
	<args>
          <arg value = "-a" />
          <arg value = "-m" />
          <arg value = "Release ${module.version}" />
	</args>
      </git> 
    </sequential>
  </macrodef>

  <macrodef name = "git-commit">
    <attribute name = "message" />
    <sequential>
      <git command = "commit">
	<args>
          <arg value = "-a" />
          <arg value = "-m" />
          <arg value = "@{message}" />
	</args>
      </git> 
    </sequential>
  </macrodef>

  <macrodef name = "git-tag-release">
    <sequential>
      <git command = "tag">
	<args>
          <arg value = "-u" />
          <arg value = "michael.fuchs@dbdoclet.org" />
          <arg value = "-m" />
          <arg value = "Release ${module.version}" />
	  <arg value = "${module.version}" />
	</args>
      </git> 
    </sequential>
  </macrodef>

  <macrodef name = "git-checkout-master">
    <sequential>
      <git command = "checkout">
	<args>
          <arg value = "master" />
	</args>
      </git> 
    </sequential>
  </macrodef>

  <macrodef name = "git-checkout-develop">
    <sequential>
      <git command = "checkout">
	<args>
          <arg value = "develop" />
	</args>
      </git> 
    </sequential>
  </macrodef>

  <macrodef name = "git-checkout-branch">
    <sequential>
      <git command = "checkout">
	<args>
          <arg value = "release-${branch.version}" />
	</args>
      </git> 
    </sequential>
  </macrodef>

  <macrodef name = "git-merge-master">
    <sequential>
      <git command = "merge">
	<args>
          <arg value = "master" />
	</args>
      </git> 
    </sequential>
  </macrodef>

  <macrodef name = "git-merge-develop">
    <sequential>
      <git command = "merge">
	<args>
          <arg value = "-X" />
	  <arg value = "theirs" />
          <arg value = "develop" />
	</args>
      </git> 
    </sequential>
  </macrodef>

  <macrodef name = "git-merge-release">
    <sequential>
      <git command = "merge">
	<args>
          <arg value = "-X" />
	  <arg value = "theirs" />
          <arg value = "release-${branch.version}" />
	</args>
      </git> 
    </sequential>
  </macrodef>

  <macrodef name = "git-check-for-modifications">
    <sequential>
      <git command = "diff-index">
	<args>
          <arg value = "--quiet" />
          <arg value = "HEAD" />
	</args>
      </git> 
    </sequential>
  </macrodef>

  <!-- ========================================== -->
  <!-- CLEAN                                      -->
  <!-- ========================================== -->
  <target name="clean">
    <delete verbose="false" includeEmptyDirs="true" failonerror="no">
      <fileset dir="${build.dir}" />
      <fileset dir="${basedir}/doc/build"/>
      <fileset dir="${basedir}/doc/tutorial/build"/>
      <fileset dir="${distrib.dir}" />
      <fileset dir="${basedir}" defaultexcludes="no">
	<include name="**/*~" />
	<include name="**/.#*" />
	<include name="**/#*#" />
	<include name="**/*.log" />
      </fileset>
      <fileset dir="${basedir}/doc">
	<include name="**/*.pdf" />
	<include name="**/*.fo" />
	<include name="**/*.db5" />
      </fileset>
    </delete>
    
  </target>

  <!-- ========================================== -->
  <!-- CLEAN ALL                                  -->
  <!-- ========================================== -->
  <target name="clean.all">
    <ivy:buildlist reference="build-path" root="${ant.project.name}" onlydirectdep="true" onMissingDescriptor="skip">
      <fileset dir="${basedir}/../">
	<include name="**/build.xml" />
      </fileset>
    </ivy:buildlist>
    <subant target="clean" buildpathref="build-path" />
  </target>

  <!-- ========================================== -->
  <!-- CLEAN DEEP ALL                             -->
  <!-- ========================================== -->
  <target name="clean.deepAll">
    <ivy:buildlist reference="build-path" root="${ant.project.name}" onlydirectdep="false" onMissingDescriptor="skip">
      <fileset dir="${basedir}/../">
	<include name="**/build.xml" />
      </fileset>
    </ivy:buildlist>
    <subant target="clean" buildpathref="build-path" />
  </target>

  <!-- ========================================== -->
  <!-- DISTCLEAN                                  -->
  <!-- ========================================== -->
  <target name="distclean">
    <antcall target="clean" />
    <delete verbose="${verbose}" dir="lib" />
  </target>

  <!-- ========================================== -->
  <!-- DISTCLEAN ALL                              -->
  <!-- ========================================== -->
  <target name="distclean.all">
    <ivy:buildlist reference="build-path" root="${ant.project.name}" onlydirectdep="true" onMissingDescriptor="skip">
      <fileset dir="${basedir}/../">
	<include name="**/build.xml" />
      </fileset>
    </ivy:buildlist>
    <subant target="distclean" buildpathref="build-path" />
  </target>

  <!-- ========================================== -->
  <!-- DISTCLEAN DEEP ALL                         -->
  <!-- ========================================== -->
  <target name="distclean.deepAll">
    <ivy:buildlist reference="build-path" root="${ant.project.name}" onlydirectdep="false" onMissingDescriptor="skip">
      <fileset dir="${basedir}/../">
	<include name="**/build.xml" />
      </fileset>
    </ivy:buildlist>
    <subant target="distclean" buildpathref="build-path" />
  </target>

  <!-- ========================================== -->
  <!-- CLEAN IVY CACHE                            -->
  <!-- ========================================== -->
  <target name="clean.cache">
    <ivy:cleancache />
  </target>

  <!-- ========================================== -->
  <!-- COMPILE                                    -->
  <!-- ========================================== -->
  <target name="compile" depends="resolve" if="src.main.dir.exists">
    <mkdir dir="${build.main.classes.dir}" />
    <default.main.javac>
      <src refid="src.main.path" />
    </default.main.javac>
    <mkdir dir="src/main/resources" />
    <copy todir="${build.main.classes.dir}">
      <fileset dir="src/main/resources">
	<include name="*/**" />
      </fileset>
    </copy>
  </target>

  <!-- ========================================== -->
  <!-- RESOURCES                                  -->
  <!-- ========================================== -->
  <target name="resources" if="src.main.resources.dir.exists">
    <mkdir dir="${build.main.classes.dir}" />
    <copy todir="${build.main.classes.dir}">
      <fileset dir="src/main/resources">
	<include name="*/**" />
      </fileset>
    </copy>
  </target>

  <!-- ========================================== -->
  <!-- BUNDLE                                     -->
  <!-- ========================================== -->
  <target name="bundle">
    <taskdef resource="aQute/bnd/ant/taskdef.properties">
      <classpath>
	<pathelement location="${default.dir}/lib/bnd_2.3.0.jar" />
      </classpath>
    </taskdef>
    <replaceregexp file="build.bnd" match="^version=.*$" replace="version=${module.version}" byline="true" />
    <property file="build.bnd" />
    <property name="bundle.jar" value="${Bundle-SymbolicName}.jar" />
    <mkdir dir="${distrib.dir}" />
    <mkdir dir="${src.main.dir}" />
    <bnd classpath="${build.main.classes.dir}" sourcepath="${src.main.dir}" files="build.bnd" output="${distrib.dir}/${bundle.jar}" />
  </target>

  <!-- ========================================== -->
  <!-- SCRATCH                                      -->
  <!-- ========================================== -->
  <target name="scratch" depends="distclean, build" />

  <!-- ========================================== -->
  <!-- BUILD                                      -->
  <!-- ========================================== -->
  <target name="build">
    <echo>&gt;&gt;&gt;&gt;&gt; building ${ant.project.name} </echo>
    <antcall target="resolve"/>
    <antcall target="compile"/>
    <antcall target="resources"/>
    <antcall target="bundle"/>
    <antcall target="publish"/>
    <echo>&lt;&lt;&lt;&lt;&lt; building ${ant.project.name} </echo>
  </target>

  <!-- ========================================== -->
  <!-- BUILD ALL                                  -->
  <!-- ========================================== -->
  <target name="build.all">
    <ivy:buildlist reference="build-path" root="${ant.project.name}" onlydirectdep="true" onMissingDescriptor="skip">
      <fileset dir="${basedir}/../">
	<include name="**/build.xml" />
      </fileset>
    </ivy:buildlist>
    <subant target="build" buildpathref="build-path" />
  </target>

  <!-- ========================================== -->
  <!-- BUILD ALL WITH DEPENDENCIES               -->
  <!-- ========================================== -->
  <target name="build.deepAll">
    <ivy:buildlist reference="build-path" root="${ant.project.name}" onlydirectdep="false" onMissingDescriptor="skip">
      <fileset dir="${basedir}/../">
	<include name="**/build.xml" />
      </fileset>
    </ivy:buildlist>
    <subant target="build" buildpathref="build-path" />
  </target>

  <!-- ========================================== -->
  <!-- TEST                                       -->
  <!-- ========================================== -->
  <target name="test.check">
    <script language="javascript">
      var projectName = project.getName();
      project.setProperty("test.bundle", projectName.replaceAll("org.dbdoclet", "org.dbdoclet.test"));
    </script>
    <available file="../${test.bundle}" type="dir" property="test.bundle.exists"/>
    <available file="src/test/java" type="dir" property="test.dir.exists"/> 
  </target>

  <target name="test" depends="test.check">
    <antcall target="test.ant"/>
    <antcall target="test.bundle.ant"/>
  </target>
  
  <target name="test.bundle.ant" if="test.bundle.exists">
    <ant useNativeBasedir="true" dir="../${test.bundle}" target="build"/>
    <ant useNativeBasedir="true" dir="../${test.bundle}" target="test.run">
      <property name="test.object" value="${test.bundle}"/>
    </ant>
  </target>
  
  <target name="test.ant" if="test.dir.exists">
    <ant target="test.run">
      <property name="test.object" value="${ant.project.name}"/>
    </ant>
  </target>
  
  <target name="test.run">

    <echo>basedir=${basedir}</echo>
    <mkdir dir="${build.test.classes.dir}" />
    <mkdir dir="${src.test.dir}" />

    <javac destdir="${build.test.classes.dir}" debug="true" includeantruntime="true" encoding="UTF-8">
      <classpath>
	<pathelement path="../${test.object}/build/main/classes" />
	<pathelement path="./build/main/classes" />
	<fileset dir="../${test.object}/lib">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
      <compilerarg value="${javac.args}" />
      <src refid="src.test.path" />
    </javac>
    
    <mkdir dir="src/test/resources" />
    <copy todir="${build.test.classes.dir}">
      <fileset dir="src/test/resources">
	<include name="*/**" />
      </fileset>
    </copy>
    <mkdir dir="${test.report.dir}" />
    <junit printsummary="yes">
      <classpath>
	<pathelement path="build/test/classes" />
	<pathelement path="src/main/java" />
	<pathelement path="src/main/resources" />
	<pathelement path="src/test/java" />
	<pathelement path="src/test/resources" />
	<pathelement path="../${test.object}/build/main/classes" />
	<fileset dir="../${test.object}/lib">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="./distrib">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="./distrib">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
      <formatter type="xml" />
      <batchtest fork="yes" todir="${test.report.dir}">
	<fileset dir="src/test/java">
	  <include name="**/*Tests.java" />
	  <include name="**/*Test.java" />
	  <exclude name="**/Abstract*.java"/>
	</fileset>
      </batchtest>
    </junit>
  </target>

  <target name="test.report">
    <junitreport todir="${test.report.dir}">
      <fileset dir="${test.report.dir}">
	<include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${test.report.dir}/html" />
    </junitreport>
  </target>

  <!-- ========================================== -->
  <!-- TEST ALL                                   -->
  <!-- ========================================== -->
  <target name="test.all">
    <delete dir="${test.report.dir}"/>
    <ivy:buildlist reference="build-path" root="${ant.project.name}" onlydirectdep="true" onMissingDescriptor="skip">
      <fileset dir="${basedir}/../">
	<include name="**/build.xml" />
      </fileset>
    </ivy:buildlist>
    <subant target="test" buildpathref="build-path" />
    <antcall target="test.report"/>
  </target>

  <!-- ========================================== -->
  <!-- JAVADOC                                    -->
  <!-- ========================================== -->
  <target name="javadoc">
    <javadoc sourcepath="src/main/java" destdir="build/javadoc" classpath="lib">
      <classpath>
	<fileset dir="lib"/>
      </classpath>
    </javadoc>
  </target>

  <!-- ========================================== -->
  <!-- MVN BUNDLE                                 -->
  <!-- ========================================== -->
  <target name="mvn-bundle">
    <property name="mvn.dir" value="build/mvn"/>
    <mkdir dir="${mvn.dir}"/>
    <copy file="pom.xml" tofile="${mvn.dir}/${module.artifactId}-${module.version}.pom">
      <filterset>
	<filter token="VERSION" value="${module.version}"/>
      </filterset>
    </copy>
    <copy file="distrib/${module.artifactId}_${module.version}.jar" tofile="${mvn.dir}/${module.artifactId}-${module.version}.jar"/>
    <antcall target="javadoc"/>
    <jar destfile="${mvn.dir}/${module.artifactId}-${module.version}-javadoc.jar">
      <fileset dir="build/javadoc"/>
    </jar>
    <jar destfile="${mvn.dir}/${module.artifactId}-${module.version}-sources.jar">
      <fileset dir="src/main/java"/>
      <fileset dir="src/main/resources"/>
    </jar>
  </target>

  <!-- ========================================== -->
  <!-- IVY RESOLVE                                -->
  <!-- ========================================== -->
  <target name="resolve">
    <ivy:settings file="${ivy.settings.file}" />
    <ivy:resolve resolveMode="${resolveMode}"/>
    <echo>resolve mode = ${resolveMode} ${ivy.retrieve.pattern}, basedir=${basedir}</echo>
    <ivy:retrieve pattern="${basedir}/lib/[artifact]_[revision].[ext]" />
    <mkdir dir="${basedir}/lib" />
    <path id="resolve.classpath">
      <fileset dir="${basedir}/lib" />
    </path>
  </target>

  <!-- ========================================== -->
  <!-- IVY PUBLISH                                -->
  <!-- ========================================== -->
  <target name="publish" depends="resolve">
    <property name="ivy.overwrite" value="true"/>
    <property name="ivy.status" value="integration"/>
    <echo>ivy status = ${ivy.status}</echo>
    <ivy:publish resolver="local" status="${ivy.status}" overwrite="${ivy.overwrite}" artifactspattern="distrib/[artifact].[ext]" />
  </target>

  <!-- ========================================== -->
  <!-- MODULE TARGETS                             -->
  <!-- ========================================== -->
  <target name="module.clean">
    <iterate target="distclean"/>
  </target>

  <target name="module.build">
    <iterate target="build"/>
  </target>

  <target name="module.release">
    <git-checkout-develop/>
    <git-check-for-modifications/>
    <script language="javascript">
      var version = project.getProperty("module.version");
      version = version.replaceAll("-SNAPSHOT", "");
      project.setProperty("module.version", version);
      var branchVersion = version.substring(0, version.lastIndexOf('.'));	
      project.setProperty("branch.version", branchVersion);
    </script>
    <echo>module.version=${module.version}</echo>
    <git-branch-release/>
    <git-merge-develop/>
    <propertyfile file="module.properties">
      <entry key="module.version" value="${module.version}"/>
      <entry key="java.debug" value="off"/>
      <entry key="java.deprecation" value="off"/>
    </propertyfile>
    <antcall target="rebuild">
      <param name="resolveMode" value="default"/>
      <param name="ivy.status" value="release"/>    
      <param name="ivy.overwrite" value="false"/>    
    </antcall>
    <git-commit-release/>
    <git-checkout-master/>
    <git-merge-release/>
    <git-tag-release/>
    <git-checkout-develop/>
    <incr-release-number/>
    <antcall target="rebuild">
      <param name="resolveMode" value="dynamic"/>
      <param name="ivy.status" value="integration"/>    
      <param name="ivy.overwrite" value="true"/>    
    </antcall>
    <git-commit message="Incremented release number."/>
  </target>

  <target name="module.patch">
    <git-checkout-develop/>
    <git-check-for-modifications/>
    <script language="javascript">
      var version = project.getProperty("module.version");
      project.setProperty("module.version", version.replaceAll("-SNAPSHOT", ""));
      var branchVersion = version.substring(0, version.lastIndexOf('.'));	
      project.setProperty("branch.version", branchVersion);
    </script>
    <echo>module.version=${module.version}</echo>
    <git-branch-release/>
    <git-merge-develop/>
    <propertyfile file="module.properties">
      <entry key="module.version" value="${module.version}"/>
      <entry key="java.debug" value="off"/>
      <entry key="java.deprecation" value="off"/>
    </propertyfile>
    <antcall target="rebuild">
      <param name="resolveMode" value="default"/>
      <param name="ivy.status" value="release"/>    
      <param name="ivy.overwrite" value="false"/>    
    </antcall>
    <git-commit-release/>
    <git-checkout-master/>
    <git-merge-release/>
    <git-tag-release/>
    <git-checkout-develop/>
    <incr-patch-number/>
    <antcall target="rebuild">
      <param name="resolveMode" value="dynamic"/>
      <param name="ivy.status" value="integration"/>    
      <param name="ivy.overwrite" value="true"/>    
    </antcall>
    <git-commit message="Incremented patch number."/>
  </target>

  <target name="debug">
    <git-check-for-modifications/>
  </target>
  
</project>
